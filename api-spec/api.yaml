swagger: '2.0'
info:
  description: UprzejmieDonosze API
  version: "1.0.3"
  title: UprzejmieDonosze API
  
  contact:
    email: info@uprzejmiedonosze.net

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

tags:
- name: admins
  description: Secured Admin-only calls
- name: users
  description: Operations available to regular logged-in users
- name: public
  description: Operations available publicly

parameters:
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  bearer_token:
    description: OAuth bearer token.
    in: query
    name: bearer_token
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  image_data:
    description: byte64 image data
    in: formData
    name: image_data
    type: file
    required: true

paths:
  /v1/user/application/new:
    post:
      tags:
      - users
      summary: creates new empty application
      operationId: new-application
      produces:
      - application/json
      responses:
        200:
          description: returns id of new application
          schema:
            $ref: '#/definitions/Application'
        401:
          description: valid user session required
  
  /v1/user/image-context:
    post:
      tags:
      - users
      summary: uploads image
      operationId: image-context
      description: |
        Upload contex image and extract geolocation data.
      produces:
      - application/json
      consumes:
      - multipart/form-data
      parameters:
      - $ref: '#/parameters/image_data'
      responses:
        200:
          description: Extracted geolocation data.
          schema:
            $ref: '#/definitions/Address'
        400:
          $ref: "#/responses/BadParameter"
        401:
          $ref: "#/responses/Unauthorized"

  /v1/user/image-plate:
    post:
      tags:
      - users
      summary: uploads image
      operationId: image-plate
      description: |
        Upload car's plate image and extract plate id.
      produces:
      - application/json
      consumes:
      - multipart/form-data
      parameters:
      - $ref: '#/parameters/image_data'
      responses:
        200:
          description: Extracted car details
          schema:
            $ref: '#/definitions/CarInfo'
        400:
          $ref: "#/responses/BadParameter"
        401:
          $ref: "#/responses/Unauthorized"

  /v1/user/application:
    get:
      tags:
      - users
      summary: retrieve user's applications
      operationId: get-applications
      produces:
      - application/json
      consumes: [multipart/form-data]
      responses:
        200:
          description: Applications
          schema:
            type: array
            items:
              $ref: '#/definitions/Application'
        401:
          $ref: "#/responses/Unauthorized"
    post:
      tags:
      - users
      summary: post application data
      operationId: post-application
      description: Send application data
      produces:
        - application/json
      consumes: [multipart/form-data]
      parameters:
      - in: body
        name: application
        schema:
          $ref: '#/definitions/Application'
      responses:
        200:
          description: Application created
        400:
          $ref: "#/responses/BadParameter"
        401:
          $ref: "#/responses/Unauthorized"

  /v1/user/application/{id}/pdf:
    get:
      tags:
      - users
      summary: get application printer friendly form
      operationId: get-application-pdf
      description: retrieve application's PDF details by id
      produces:
        - application/pdf
      parameters: 
      - in: path
        name: id
        description: application id
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: application details
          schema:
            type: file
        400:
          $ref: "#/responses/BadParameter"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          description: user has no access to this application
        404:
          $ref: "#/responses/NotFound"
  
  /v1/user/application/{id}/set/{status}:
    post:
      tags:
      - users
      summary: Change application status
      operationId: change-application-status
      parameters: 
      - in: path
        name: id
        description: application id
        required: true
        type: string
        format: uuid
      - in: path
        name: status
        type: string
        required: true
        enum: &STATUS
      responses:
        200:
          description: application details
          schema:
            type: file
        400:
          $ref: "#/responses/BadParameter"
        401:
          $ref: "#/responses/Unauthorized"
        403:
          description: user has no access to this application
        404:
          $ref: "#/responses/NotFound"

definitions:
  Address:
    type: object
    required:
    - street
    - city
    - voivodeship
    properties:
      street:
        type: string
        example: Sienkiewicza 7/1
      city:
        type: string
        example: Warszawa
      voivodeship:
        type: string
        example: Mazowieckie
      long:
        type: number
        example: 52.233463
      lat:
        type: number
        example: 21.014337
  CarInfo:
    required:
    - plate_id
    - brand
    properties:
      plate_id:
        type: string
        example: SZ28473X
      brand:
        type: string
        example: Mazda CX3
      plateImage:
        type: string
        format: url
        example: https://uprzejmiedonosze.net/cdn/5996f0cf6ea54-p.jpg
  UserData:
    required:
    - name
    - email
    - personalId
    properties:
      name:
        type: string
        example: Jan Kowalski
      email:
        type: string
        format: email
        example: jan@kowalski.pl
      personalId:
        type: string
        example: DHD238747
      phone:
        type: string
        example: 123123123
  Application:
    required: 
    - id
    properties:
      id:
        type: string
        format: uuid
        example: e181a8eb-89e2-4638-8ee6-f353fef47829
      status:
        $ref: '#/definitions/ApplicationStatus'
      date:
        type: string
        format: datetime
        example: 2017-12-23T18:25:43.511Z
      contextImage:
        $ref: '#/definitions/Image'
      plateImage:
        $ref: '#/definitions/Image'
      address:
        $ref: '#/definitions/Address'
      carInfo:
        $ref: '#/definitions/CarInfo'
      userComment:
        type: string
        example: Stoi codziennie
  ApplicationStatus:
    required:
    - status
    properties:
      status:
        type: string
        enum: &STATUS
          - draft
          - ready
          - printed
          - failed
          - success
          - unknown
          - deleted
        example: draft
  Image:
    required:
      - url
      - thumb
    properties:
      url:
        type: string
        format: url
        example: https://uprzejmiedonosze.net/cdn/5996f0cf6ea54.jpg
      thumb:
        type: string
        format: url
        example: https://uprzejmiedonosze.net/cdn/5996f0cf6ea54-t.jpg
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
      message:
        type: string

responses:
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: "#/definitions/Error"
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: "#/definitions/Error"
  BadParameter:
    description: invalid input parameters
    schema:
      $ref: "#/definitions/Error"

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /
schemes:
 - https